b'<?xml version="1.0" encoding="utf-8"?><soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"  xmlns:tns="http://tempuri.org/" xmlns:tm="http://microsoft.com/wsdl/mime/textMatching/"><soap:Body><LoginResponse xmlns="http://tempuri.org/"><success>true</success><result>/*jslint node: true */\r\n&quot;use strict&quot;;\r\n\r\nvar soap = require(&apos;soap&apos;);\r\nvar express = require(&apos;express&apos;);\r\nvar fs = require(&apos;fs&apos;);\r\nconst { exec } = require(&quot;child_process&quot;);\r\nconst e = require(&apos;express&apos;);\r\n\r\n// SQL Injection Part\r\n// Preparing the SQL Server in the memory (SQLI)\r\nconst sqlite = require(&apos;better-sqlite3&apos;);\r\nconst { stderr } = require(&apos;process&apos;);\r\nconst db = new sqlite(&apos;:memory:&apos;, {fileMustExist: true})\r\n\r\n// Random User data table\r\nlet users = [\r\n  {&quot;id&quot;:1,&quot;username&quot;:&quot;kundrill0&quot;,&quot;first_name&quot;:&quot;Kaleena&quot;,&quot;last_name&quot;:&quot;Undrill&quot;,&quot;email&quot;:&quot;kundrill0@studiopress.com&quot;,&quot;password&quot;:&quot;5403b63f6e34ac7baf9b45b12ebcdef8&quot;},\r\n  {&quot;id&quot;:2,&quot;username&quot;:&quot;vjurick1&quot;,&quot;first_name&quot;:&quot;Vicki&quot;,&quot;last_name&quot;:&quot;Jurick&quot;,&quot;email&quot;:&quot;vjurick1@washington.edu&quot;,&quot;password&quot;:&quot;e31d343fa598048707b1a425a521e16f&quot;},\r\n  {&quot;id&quot;:3,&quot;username&quot;:&quot;eporter2&quot;,&quot;first_name&quot;:&quot;Edna&quot;,&quot;last_name&quot;:&quot;Porter&quot;,&quot;email&quot;:&quot;eporter2@creativecommons.org&quot;,&quot;password&quot;:&quot;5004fc6d57e1c2627823f85081ac69d0&quot;},\r\n  {&quot;id&quot;:4,&quot;username&quot;:&quot;glowne3&quot;,&quot;first_name&quot;:&quot;Gelya&quot;,&quot;last_name&quot;:&quot;Lowne&quot;,&quot;email&quot;:&quot;glowne3@ebay.co.uk&quot;,&quot;password&quot;:&quot;e3ce3aade31412ea292f856b669df133&quot;},\r\n  {&quot;id&quot;:5,&quot;username&quot;:&quot;tburgiss4&quot;,&quot;first_name&quot;:&quot;Tabatha&quot;,&quot;last_name&quot;:&quot;Burgiss&quot;,&quot;email&quot;:&quot;tburgiss4@reference.com&quot;,&quot;password&quot;:&quot;1e22d7c020445755f7568b226dab497a&quot;},\r\n  {&quot;id&quot;:6,&quot;username&quot;:&quot;ngarmans5&quot;,&quot;first_name&quot;:&quot;Natalie&quot;,&quot;last_name&quot;:&quot;Garmans&quot;,&quot;email&quot;:&quot;ngarmans5@sogou.com&quot;,&quot;password&quot;:&quot;77bf3467976ba4ce68caba0c1cc584db&quot;},\r\n  {&quot;id&quot;:7,&quot;username&quot;:&quot;vburgett6&quot;,&quot;first_name&quot;:&quot;Vannie&quot;,&quot;last_name&quot;:&quot;Burgett&quot;,&quot;email&quot;:&quot;vburgett6@dion.ne.jp&quot;,&quot;password&quot;:&quot;8bc54779397d23f3055e006cf5bc29c8&quot;},\r\n  {&quot;id&quot;:8,&quot;username&quot;:&quot;cdrieu7&quot;,&quot;first_name&quot;:&quot;Cherin&quot;,&quot;last_name&quot;:&quot;Drieu&quot;,&quot;email&quot;:&quot;cdrieu7@ucsd.edu&quot;,&quot;password&quot;:&quot;718a62666e9328542b2d2066f85d170f&quot;},\r\n  {&quot;id&quot;:9,&quot;username&quot;:&quot;oganderton8&quot;,&quot;first_name&quot;:&quot;Orion&quot;,&quot;last_name&quot;:&quot;Ganderton&quot;,&quot;email&quot;:&quot;oganderton8@wp.com&quot;,&quot;password&quot;:&quot;c0708a8e3528303d3a0edd6c479cf498&quot;},\r\n  {&quot;id&quot;:10,&quot;username&quot;:&quot;dguillon9&quot;,&quot;first_name&quot;:&quot;Donall&quot;,&quot;last_name&quot;:&quot;Guillon&quot;,&quot;email&quot;:&quot;dguillon9@bloglines.com&quot;,&quot;password&quot;:&quot;91920531d9434c300c75f376b8e2fe58&quot;},\r\n  {&quot;id&quot;:11,&quot;username&quot;:&quot;cfateleya&quot;,&quot;first_name&quot;:&quot;Cobby&quot;,&quot;last_name&quot;:&quot;Fateley&quot;,&quot;email&quot;:&quot;cfateleya@friendfeed.com&quot;,&quot;password&quot;:&quot;7b637dbb44f5890dcdc1d3da989bc2d0&quot;},\r\n  {&quot;id&quot;:12,&quot;username&quot;:&quot;ymiddiffb&quot;,&quot;first_name&quot;:&quot;York&quot;,&quot;last_name&quot;:&quot;Middiff&quot;,&quot;email&quot;:&quot;ymiddiffb@wp.com&quot;,&quot;password&quot;:&quot;dc9558b8f1b8e92206f8f345183e57de&quot;},\r\n  {&quot;id&quot;:13,&quot;username&quot;:&quot;ejahnkec&quot;,&quot;first_name&quot;:&quot;Enoch&quot;,&quot;last_name&quot;:&quot;Jahnke&quot;,&quot;email&quot;:&quot;ejahnkec@un.org&quot;,&quot;password&quot;:&quot;144e207a01d01aabb35b591a921f7ae2&quot;},\r\n  {&quot;id&quot;:14,&quot;username&quot;:&quot;vfebend&quot;,&quot;first_name&quot;:&quot;Vivi&quot;,&quot;last_name&quot;:&quot;Feben&quot;,&quot;email&quot;:&quot;vfebend@so-net.ne.jp&quot;,&quot;password&quot;:&quot;0a3f81f0cd0809b3880209bb5f2897a8&quot;},\r\n  {&quot;id&quot;:15,&quot;username&quot;:&quot;wphilippee&quot;,&quot;first_name&quot;:&quot;Willamina&quot;,&quot;last_name&quot;:&quot;Philippe&quot;,&quot;email&quot;:&quot;wphilippee@geocities.com&quot;,&quot;password&quot;:&quot;b57e2d4bd02ac840a77169b86b17fe18&quot;},\r\n  {&quot;id&quot;:16,&quot;username&quot;:&quot;dkrochf&quot;,&quot;first_name&quot;:&quot;Dorette&quot;,&quot;last_name&quot;:&quot;Kroch&quot;,&quot;email&quot;:&quot;dkrochf@taobao.com&quot;,&quot;password&quot;:&quot;ca4fa280142f668389bd5a17a40facdc&quot;},\r\n  {&quot;id&quot;:17,&quot;username&quot;:&quot;rdangelog&quot;,&quot;first_name&quot;:&quot;Regan&quot;,&quot;last_name&quot;:&quot;D&apos; Angelo&quot;,&quot;email&quot;:&quot;rdangelog@irs.gov&quot;,&quot;password&quot;:&quot;d1b7870a85330bfe836167b70f53e19e&quot;},\r\n  {&quot;id&quot;:18,&quot;username&quot;:&quot;klaminmanh&quot;,&quot;first_name&quot;:&quot;Kimberli&quot;,&quot;last_name&quot;:&quot;Laminman&quot;,&quot;email&quot;:&quot;klaminmanh@feedburner.com&quot;,&quot;password&quot;:&quot;91a989768881e5d02a4dd1466304a6b6&quot;},\r\n  {&quot;id&quot;:19,&quot;username&quot;:&quot;dgaffeyi&quot;,&quot;first_name&quot;:&quot;Duke&quot;,&quot;last_name&quot;:&quot;Gaffey&quot;,&quot;email&quot;:&quot;dgaffeyi@upenn.edu&quot;,&quot;password&quot;:&quot;b4a519b72aabc10f506a68e904bae624&quot;},\r\n  {&quot;id&quot;:20,&quot;username&quot;:&quot;rramelj&quot;,&quot;first_name&quot;:&quot;Rozanne&quot;,&quot;last_name&quot;:&quot;Ramel&quot;,&quot;email&quot;:&quot;rramelj@yahoo.com&quot;,&quot;password&quot;:&quot;da5dd4d9732c5780de09a0ed85f39b09&quot;},\r\n  {&quot;id&quot;:21,&quot;username&quot;:&quot;mbeekmannk&quot;,&quot;first_name&quot;:&quot;Michal&quot;,&quot;last_name&quot;:&quot;Beekmann&quot;,&quot;email&quot;:&quot;mbeekmannk@dot.gov&quot;,&quot;password&quot;:&quot;a868aa3d7c78512919d278f4437d245d&quot;},\r\n  {&quot;id&quot;:22,&quot;username&quot;:&quot;nbruckentl&quot;,&quot;first_name&quot;:&quot;Nonna&quot;,&quot;last_name&quot;:&quot;Bruckent&quot;,&quot;email&quot;:&quot;nbruckentl@tuttocitta.it&quot;,&quot;password&quot;:&quot;5c4a029fbd210c60de4cfb21f1c9bc54&quot;},\r\n  {&quot;id&quot;:23,&quot;username&quot;:&quot;cgramerm&quot;,&quot;first_name&quot;:&quot;Creigh&quot;,&quot;last_name&quot;:&quot;Gramer&quot;,&quot;email&quot;:&quot;cgramerm@lycos.com&quot;,&quot;password&quot;:&quot;4b80d8fe60dbcdc9e13cdd3a4ba5a798&quot;},\r\n  {&quot;id&quot;:24,&quot;username&quot;:&quot;fkenwoodn&quot;,&quot;first_name&quot;:&quot;Fan&quot;,&quot;last_name&quot;:&quot;Kenwood&quot;,&quot;email&quot;:&quot;fkenwoodn@noaa.gov&quot;,&quot;password&quot;:&quot;eb52cdda3e62420420ce8643968c63e8&quot;},\r\n  {&quot;id&quot;:25,&quot;username&quot;:&quot;jcastelluzzio&quot;,&quot;first_name&quot;:&quot;Jaquelyn&quot;,&quot;last_name&quot;:&quot;Castelluzzi&quot;,&quot;email&quot;:&quot;jcastelluzzio@mashable.com&quot;,&quot;password&quot;:&quot;eaf9be04a50bb301e0e70ca7ab3e6a2a&quot;}\r\n]\r\n\r\n// Preparing the Database\r\ndb.exec(&quot;CREATE TABLE users (id INTEGER, name TEXT, email TEXT, username TEXT, password TEXT)&quot;);\r\n\r\nvar stmt = db.prepare(&quot;INSERT INTO users VALUES (?, ?, ?, ?, ?)&quot;);\r\nusers.forEach(user =&gt; {\r\n  stmt.run([ user.id.toString(), user.first_name + user.last_name, user.email, user.username, user.password])\r\n});\r\nstmt.run([\r\n  &quot;0&quot;,\r\n  &quot;Administrator&quot;,\r\n  &quot;admin@htb.net&quot;,\r\n  &quot;admin&quot;,\r\n  &apos;FLAG{1337_SQL_INJECTION_IS_FUN_:)}&apos;\r\n])\r\n\r\n\r\n\r\n\r\n// Loading the WSDL file\r\nvar xml = fs.readFileSync(&apos;service.wsdl&apos;, &apos;utf8&apos;);\r\n// Creating the Express App\r\nvar app = express();\r\n\r\n// Web root (/) handler\r\napp.get(&apos;/&apos;, function (req, res) {\r\n  return res.status(404).end()\r\n})\r\n\r\n\r\n\r\n// SOAP Router function.. Custom made one, this will make the application vulnerable to SOAP Action Spoofing\r\nfunction soapRouter(args, callback, tmp, req){\r\n  // Checking if there is a SOAP Action header...\r\n  if (req.headers[&apos;soapaction&apos;] == undefined){\r\n    return {\r\n      error: &quot;Missing SOAPAction header&quot;\r\n    }\r\n  }\r\n\r\n  // Checking if the SOAP Action header is sent as intended\r\n  let action = &quot;&quot;;\r\n  try {\r\n    action = JSON.parse(req.headers[&apos;soapaction&apos;])\r\n  } catch (error) {\r\n    return {\r\n      error: &quot;Missing SOAPAction header&quot;\r\n    }\r\n  }\r\n\r\n  // Routing the request to appropriate function\r\n  switch (action) {\r\n    case &quot;Login&quot;:\r\n      login_service(args, callback, tmp, req)\r\n      break;\r\n\r\n    case &quot;ExecuteCommand&quot;:\r\n      execcmd_service(args, callback, tmp, req)\r\n      break;\r\n  \r\n    default:\r\n      return {\r\n        error: &quot;Unknown SOAPAction&quot;\r\n      }\r\n  }\r\n\r\n} \r\n\r\n\r\n// Creating the Login Service\r\nfunction login_service(args, callback, tmp, req) {\r\n  console.log(&quot;[+] Called Login Function...&quot;)\r\n\r\n  // Checking the SOAP Action header, so this function is not vulnerable to SOAPAction Spoofing...\r\n  if (req.headers[&apos;soapaction&apos;] !== &quot;\\&quot;Login\\&quot;&quot;) {\r\n    return {\r\n      error: &quot;SOAPAction Value is invalid&quot;\r\n    } \r\n  }\r\n\r\n  var username = args.username\r\n  var password = args.password\r\n\r\n  const md5 = require(&quot;md5&quot;)\r\n  var pass_hash = md5(password)\r\n\r\n  const stmt = db.prepare(`SELECT * FROM users WHERE username = &apos;${username}&apos; AND password = &apos;${pass_hash}&apos;`);\r\n  const results = stmt.all()\r\n\r\n  if (results.length == 0){\r\n    return {\r\n      success: false,\r\n      error: &quot;Username or Password is incorrect&quot;\r\n    }\r\n  }\r\n\r\n  return callback(results[0])\r\n}\r\n\r\n// Creating the ExecuteCommand Service\r\nfunction execcmd_service(args, callback, v) {\r\n  console.log(`[+] Called Exec Function with the command [${args.cmd}]`)\r\n\r\n  if (args.cmd == undefined){\r\n    return callback({\r\n      success: false,\r\n      error: &quot;Required parameters not found.&quot;\r\n    })\r\n  }\r\n\r\n  let result = exec(args.cmd, (err, stdout, stderr) =&gt; {\r\n    return callback({success: true, result: stdout})\r\n  })\r\n\r\n}\r\n\r\n\r\n// SOAP Service Object\r\nvar soapServiceObj = {\r\n  HacktheboxService: {\r\n    HacktheboxServiceSoapPort: {\r\n      Login: soapRouter,\r\n\r\n      // Temporarily disabling this SOAPAction\r\n      ExecuteCommand: function (args, callback){\r\n        return {\r\n          success: false,\r\n          error: &quot;This function is only allowed in internal networks&quot;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n\r\n\r\n// Launch the server and listen\r\nvar port = process.env.PORT || 3002;\r\napp.listen(port, &apos;0.0.0.0&apos;, function () {\r\n  console.log(&apos;Listening on port &apos; + port);\r\n  var wsdl_path = &quot;/wsdl&quot;;\r\n  soap.listen(app, wsdl_path, soapServiceObj, xml);\r\n  console.log(&quot;App is running at http://localhost:&quot;+port+&quot;/&quot;)\r\n  console.log(&quot;Check http://localhost:&quot; + port + wsdl_path + &quot;?wsdl to see if the service is working&quot;);\r\n});</result></LoginResponse></soap:Body></soap:Envelope>'
